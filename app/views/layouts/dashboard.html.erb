<!DOCTYPE html>
<html>
  <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Dashboard - Broker MT</title>
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.8.2/css/all.css">
    <%= csrf_meta_tags %>
    <%= csp_meta_tag %>
    <%= stylesheet_link_tag    'application', media: 'all' %>
  </head>
  <body class="fixed-sn mdb-skin">
    <%= render partial: "dashboard/sidebar" %>
    <%= render partial: "dashboard/navbar" %>
    <main>
      <%= yield %>
    </main>
    <%= render partial: "dashboard/footer" %>
  </body>
  <%= javascript_include_tag 'application' %>
  <!-- Initializations -->
  <script>
    // SideNav Initialization
    $(".button-collapse").sideNav();
    
    var container = document.querySelector('.custom-scrollbar');
    var ps = new PerfectScrollbar(container, {
        wheelSpeed: 2,
        wheelPropagation: true,
        minScrollbarLength: 20
    });
    
    // Material Select Initialization
    $(document).ready(function () {
        $('.mdb-select').material_select();
    });
    
    // Tooltips Initialization
    $(function () {
        $('[data-toggle="tooltip"]').tooltip()
    })
  </script>
  <script>
    $(function () {
        $('.min-chart#chart-sales').easyPieChart({
            barColor: "#FF5252",
            onStep: function (from, to, percent) {
                $(this.el).find('.percent').text(Math.round(percent));
            }
        });
    });
  </script>
  <script>
    function hexToRgb(hex) {
        // Expand shorthand form (e.g. "03F") to full form (e.g. "0033FF")
        var shorthandRegex = /^#?([a-f\d])([a-f\d])([a-f\d])$/i;
        hex = hex.replace(shorthandRegex, function (m, r, g, b) {
            return r + r + g + g + b + b;
        });
    
        var result = /^#?([a-f\d]{2})([a-f\d]{2})([a-f\d]{2})$/i.exec(hex);
        return result ? {
            r: parseInt(result[1], 16),
            g: parseInt(result[2], 16),
            b: parseInt(result[3], 16)
        } : null;
    }
    
    
    /**
     * Início da configuração dos chats.js
     */
    
    /** Variáveis vão aqui */
    var years1 = [150235.22, 160521.60] // Valores para os anos do primeiro gráfico
    var years2 = [180457.99, 140648.01] // Valores para os anos do segundo gráfico
    
    /**
     * Não é necessário mexer nesse trecho...
     */
    var max1 = [...years1].sort().pop()
    var max2 = [...years2].sort().pop()
    var step1 = max1 / 4
    var step2 = max2 / 4
    var top1 = max1 + step1
    var top2 = max2 + step2
    
    /**
     *****************
     */
    
    new Chart(document.getElementById('bar-canvas1'), {
        type: 'bar',
    
        data: {
            labels: ['Análise Setor YYD'],
            datasets: [
                {
                    label: '2018',
                    data: [years1[0]],
                    backgroundColor: [
                        '#243a51',
    
                    ]
                },
                {
                    label: '2019',
                    data: [years1[1]],
                    backgroundColor: [
                        '#09c'
                    ]
                }
            ]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false
            },
            scales: {
                xAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Ano',
                        barPercentage: 0.5,
                        categoryPercentage: 0.5
                    }
                }],
                yAxes: [{
                    display: false,
                    scaleLabel: {
                        display: false,
                        labelString: 'Valor'
                    },
                    barPercentage: 0.5,
                    categoryPercentage: 0.5,
                    ticks: {
                        min: 0,
                        max: top1,
                        stepSize: step1,
                        callback: function (label, index, labels) {
                            return label.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' });
                        }
                    },
                    gridLines: {
                        display: false
                    }
                }]
            },
            maintainAspectRatio: false,
            plugins: {
                labels: {
                    render: 'value'
                }
            },
            animation: {
                duration: 3000,
                easing: 'easeInCubic',
                onComplete: function () {
                    var chartInstance = this.chart,
                        ctx = chartInstance.ctx;
    
                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
    
                    this.data.datasets.forEach(function (dataset, i) {
    
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            if (dataset.data[index] > 0) {
                                var data = dataset.data[index];
                                ctx.fillText(data.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' }), bar._model.x, bar._model.y);
                            }
                        });
                    });
                }
            }
        },
    });
    new Chart(document.getElementById('bar-canvas2'), {
        type: 'bar',
    
        data: {
            labels: ['Análise Setor YYD'],
            datasets: [
                {
                    label: '2019',
                    data: [years2[0]],
                    backgroundColor: [
                        '#243a51',
    
                    ]
                },
                {
                    label: '2020',
                    data: [years2[1]],
                    backgroundColor: [
                        '#09c'
                    ]
                }
            ]
        },
        options: {
            responsive: true,
            tooltips: {
                enabled: false
            },
            scales: {
                xAxes: [{
                    display: true,
                    scaleLabel: {
                        display: true,
                        labelString: 'Ano'
                    }
                }],
                yAxes: [{
                    display: false,
                    scaleLabel: {
                        display: false,
                        labelString: 'Valor'
                    },
                    ticks: {
                        min: 0,
                        max: top2,
                        stepSize: step2,
                        callback: function (label, index, labels) {
                            return label.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' });
                        }
                    },
                    gridLines: {
                        display: false
                    }
                }]
            },
            maintainAspectRatio: false,
            plugins: {
                labels: {
                    render: 'value'
                }
            },
            animation: {
                duration: 3000,
                easing: 'easeInCubic',
                onComplete: function () {
                    var chartInstance = this.chart,
                        ctx = chartInstance.ctx;
    
                    ctx.font = Chart.helpers.fontString(Chart.defaults.global.defaultFontSize, Chart.defaults.global.defaultFontStyle, Chart.defaults.global.defaultFontFamily);
                    ctx.textAlign = 'center';
                    ctx.textBaseline = 'bottom';
    
                    this.data.datasets.forEach(function (dataset, i) {
    
                        var meta = chartInstance.controller.getDatasetMeta(i);
                        meta.data.forEach(function (bar, index) {
                            if (dataset.data[index] > 0) {
                                var data = dataset.data[index];
                                ctx.fillText(data.toLocaleString('pt-br', { style: 'currency', currency: 'BRL' }), bar._model.x, bar._model.y);
                            }
                        });
                    });
                }
            }
        },
    });
    
    var percent1 = (years1[0] - years1[1]) / years1[0]
    var percent2 = (years2[0] - years2[1]) / years2[0]
    
    
    
    if (percent1 > 0) { variation_text1 = "Queda"; }
    else { variation_text1 = "Crescimento"; percent1 = percent1 * -1; }
    
    if (percent2 > 0) { variation_text2 = "Queda"; }
    else { variation_text2 = "Crescimento"; percent2 = percent2 * -1; }
    
    percent1 = (percent1 * 100).toFixed(1)
    percent2 = (percent2 * 100).toFixed(1)
    
    
    $(".text-canvas1").html(variation_text1 + " de " + percent1 + "%")
    $(".text-canvas2").html(variation_text2 + " de " + percent2 + "%")
  </script>
  <script>
    function getCurrentDate() {
        var date_now = new Date();
        var date_formated = date_now.toLocaleDateString();
        var days = new Array(
            'Domingo', 'Segunda-feira', 'Terça-feira', 'Quarta-feira', 'Quinta-feira', 'Sexta-feira', 'Sábado'
        );
        return 'Hoje é ' + days[date_now.getDay()] + ' dia ' + date_formated + '.';
    }
    document.getElementsByClassName('date_now')[0].innerHTML = getCurrentDate();
  </script>
</html>
